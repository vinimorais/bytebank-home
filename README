# Dockerfile para AplicaÃ§Ã£o Node.js

## VisÃ£o Geral
Este `Dockerfile` define a construÃ§Ã£o de uma imagem Docker para uma aplicaÃ§Ã£o Node.js. A aplicaÃ§Ã£o serÃ¡ executada dentro de um contÃªiner e exposta na porta 8200.

## Estrutura do Dockerfile

### 1. Imagem Base
```dockerfile
FROM node:18.20
```
A imagem oficial do Node.js na versÃ£o `18.20` Ã© utilizada como base.

### 2. DefiniÃ§Ã£o do DiretÃ³rio de Trabalho
```dockerfile
WORKDIR /app
```
Define `/app` como o diretÃ³rio onde os arquivos da aplicaÃ§Ã£o serÃ£o armazenados dentro do contÃªiner.

### 3. CÃ³pia dos Arquivos de DependÃªncias
```dockerfile
COPY package*.json .
```
Copia apenas os arquivos `package.json` e `package-lock.json` (caso exista) para o contÃªiner. Isso otimiza o cache do Docker e evita a reinstalaÃ§Ã£o desnecessÃ¡ria de pacotes.

### 4. InstalaÃ§Ã£o das DependÃªncias
```dockerfile
RUN npm install
```
Executa `npm install` para instalar todas as dependÃªncias da aplicaÃ§Ã£o.

### 5. CÃ³pia do CÃ³digo Fonte
```dockerfile
COPY . .
```
Copia todos os arquivos da aplicaÃ§Ã£o para dentro do contÃªiner.

### 6. ExposiÃ§Ã£o de Porta
```dockerfile
EXPOSE 8200
```
Define que o contÃªiner irÃ¡ expor a porta `8200`, permitindo que a aplicaÃ§Ã£o seja acessada externamente.

### 7. Comando de InicializaÃ§Ã£o
```dockerfile
ENTRYPOINT ["npm"]
CMD ["start", "--", "--port", "8200"]
```
- `ENTRYPOINT ["npm"]` define que o comando principal serÃ¡ `npm`.
- `CMD ["start", "--", "--port", "8200"]` especifica os argumentos para `npm`, iniciando a aplicaÃ§Ã£o e garantindo que ela rode na porta 8200.

## Como Construir e Rodar o ContÃªiner

### 1. ConstruÃ§Ã£o da Imagem
No diretÃ³rio onde o `Dockerfile` estÃ¡ localizado, execute:
```sh
docker build -t minha-aplicacao .
```
Isso criarÃ¡ uma imagem Docker chamada `minha-aplicacao`.

### 2. ExecuÃ§Ã£o do ContÃªiner
Para iniciar o contÃªiner baseado na imagem construÃ­da:
```sh
docker run -p 8200:8200 minha-aplicacao
```
Isso vincula a porta `8200` do contÃªiner Ã  porta `8200` do host.

### 3. Parada do ContÃªiner
Se necessÃ¡rio, liste os contÃªineres em execuÃ§Ã£o:
```sh
docker ps
```
E pare o contÃªiner usando:
```sh
docker stop <CONTAINER_ID>
```

## ConsideraÃ§Ãµes
- Certifique-se de que o `package.json` contÃ©m um script `"start"` corretamente configurado.
- Caso precise modificar a porta, altere tanto o `EXPOSE` quanto o comando `CMD` no Dockerfile.
- Utilize volumes (`-v`) ao rodar o contÃªiner para persistir mudanÃ§as no cÃ³digo durante o desenvolvimento.

Se precisar de mais alguma melhoria, sÃ³ avisar! ğŸš€